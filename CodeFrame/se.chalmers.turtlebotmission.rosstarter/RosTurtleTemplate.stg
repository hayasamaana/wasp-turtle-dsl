pythonTurtleTemplate(waypoints, missions) ::= <<

#!/usr/bin/env python
import rospy
from geometry_msgs.msg  import Twist
from turtlesim.msg import Pose
from turtlesim.srv import *
from std_srvs.srv import Empty
from math import pow,atan2,sqrt
from copy import copy

class turtle():
    def __init__(self, waypoints, missions):
        #Creating our node,publisher and subscriber
        rospy.init_node('turtlebot_controller', anonymous=True, log_level=rospy.DEBUG)

        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        self.pose_subscriber = rospy.Subscriber('/turtle1/pose', Pose, self.callback)
        self.pose = Pose()
        self.rate = rospy.Rate(10)
        #This is the tolerance of the controller, because the turtlesim is not the most accurate simulator
        self.tolerance = 0.1

        self.waypoints = waypoints
        self.missions = missions
        
        # Moving Turtle to start position. Thanks to LTH Group 3.
        rospy.wait_for_service('/turtle1/teleport_absolute')
        try:
            teleport_bot = rospy.ServiceProxy('/turtle1/teleport_absolute', TeleportAbsolute)
            start_position = self.waypoints['bot_start_at']
            teleport_bot(start_position[0], start_position[1], 0)
            clear_bkg = rospy.ServiceProxy('clear', Empty)
            clear_bkg()
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e

    #Callback function implementing the pose value received
    #This saves the current position of the turtle in global coordinate system
    def callback(self, data):
        self.pose = data
        self.pose.x = round(self.pose.x, 4)
        self.pose.y = round(self.pose.y, 4)

    def run_turtle(self):
        for mission in self.missions:
            rospy.loginfo("Executing mission {}".format(mission[0]))
            self.execute_mission(mission[1])
            rospy.loginfo("Execution of mission {} DONE".format(mission[0]))

    #Distance to the actual goal
    def get_distance(self, goal_x, goal_y):
        distance = sqrt(pow((goal_x - self.pose.x), 2) + pow((goal_y - self.pose.y), 2))
        return distance

    def line_task(self, waypoints):
        rospy.loginfo("Visiting {}".format(waypoints[0]))
        for wp in waypoints:
            x, y = self.get_wp_coord(wp)
            self.move2goal(x, y)
        
    def shortest_path_task(self, waypoints):
	    # https://docs.python.org/2/library/copy.html
        available_wp = copy(waypoints)
        while len(available_wp) > 0:
            rospy.logdebug("Wps left to visist {}".format(available_wp))
            closest_wp = self.find_nearest_wp(available_wp)
            rospy.logdebug("Got {} as the closest wp.".format(closest_wp))
            rospy.logdebug("{} has coordinates {}".format(closest_wp, self.waypoints[closest_wp]))
            x,y = self.get_wp_coord(closest_wp)
            self.move2goal(x, y)
            available_wp.remove(closest_wp)

    def find_nearest_wp(self, wps):
        min_distance = -1.0
        closest_wp = []
        for wp in wps:
            x,y = self.get_wp_coord(wp)
            distance = self.get_distance(x,y)
            rospy.logdebug("{} at Distance = {}".format(wp, distance))
            if min_distance == -1.0:
                min_distance = distance
                closest_wp.append(wp)
            if distance < min_distance:
                min_distance = distance
                closest_wp[0] = wp
        rospy.logdebug("{} is the closest wp at distance = {}".format(closest_wp[0], min_distance))
        return closest_wp[0]
            
    def return_to_start(self):
        rospy.logdebug('Returning to start position.')
        x,y = self.get_wp_coord('bot_start_at')
        self.move2goal(x,y)
        rospy.logdebug('At to start position.')

    def execute_mission(self, mission):
        rospy.loginfo(mission)
        for task in mission:
            rospy.loginfo("Performing task {}".format(task[0]))
            if task[0] == 'LineTask':
                self.line_task(task[1])
            if task[0] == 'ShortestPathTask':
                self.shortest_path_task(task[1])
            if task[0] == 'ReturnToStartTask':
                self.return_to_start()
                

        
    def get_wp_coord(self, waypoint):
        x = self.waypoints[waypoint][0]
        y = self.waypoints[waypoint][1]
        return x, y
 

    #This function drives the correct behavior of the robot in the turtle sim map
    def move2goal(self,posX,posY):
        speed = 10
        goal_pose = Pose()
        goal_pose.x = posX
        goal_pose.y = posY
        distance_tolerance = self.tolerance
        vel_msg = Twist()
        angErrorLast = 0.0
        angError = atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x) - self.pose.theta
        while abs(angError) >= 0.0001:
            vel_msg.angular.z = speed * 2.0 * angError
            self.velocity_publisher.publish(vel_msg)
            angError = atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x) - self.pose.theta
	
        while sqrt(pow((goal_pose.x - self.pose.x), 2) + pow((goal_pose.y - self.pose.y), 2)) >= distance_tolerance:
            vel_msg.linear.x = speed * 1.0 * sqrt(pow((goal_pose.x - self.pose.x), 2) + pow((goal_pose.y - self.pose.y), 2))
            vel_msg.linear.y = 0
            vel_msg.linear.z = 0

            angError = atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x) - self.pose.theta
            vel_msg.angular.x = 0
            vel_msg.angular.y = 0
            vel_msg.angular.z = speed * 2.0 * angError - speed * 1.0 *(angError - angErrorLast)
            angErrorLast = angError

            self.velocity_publisher.publish(vel_msg)
            self.rate.sleep()
        vel_msg.linear.x = 0
        vel_msg.angular.z =0
        self.velocity_publisher.publish(vel_msg)

if __name__ == '__main__':
    try:
        # All that we need to fill with Templates from ROSTurtle DSL
	waypoints = {<waypoints; separator=", "> }
	missions = [<missions; separator=", ">]

        #Testing our function
        #creating a turtle object        
        tb = turtle(waypoints, missions)
        tb.run_turtle()

    except rospy.ROSInterruptException: pass


>>
